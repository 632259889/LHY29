HLX Version 100
PixelShader<<<
#ifdef GL_ES
precision mediump float;
precision mediump int;
#endif

uniform float time;
uniform float duration;
uniform sampler2D hl_images[4];
uniform int object_id;
uniform vec2 hl_target_size;
varying vec2 hlf_texcoord;
void main(){
	float gray1, gray2, gray3;
	float gray4, gray, gray6;
	float gray7, gray8, gray9;
	float inversegray1, inversegray2, inversegray3;
	float inversegray4, inversegray, inversegray6;
	float inversegray7, inversegray8, inversegray9;
	vec3 sample1, sample2, sample3;
	vec3 sample4, sample, sample6;
	vec3 sample7, sample8, sample9;
	float sum;
	float guass_blur;
	float temp;
	float ex;
	float ex1;
	vec3  output_color;
	float a, b;
	float dx ;
	float dy ;
	float width;
	float height;
	vec2 uv = hlf_texcoord;
	vec4 color = vec4(1, 1, 1, 1);
	vec3 color1;
	const vec3 colorBackgnd = vec3(223.0/255.0, 202.0/255.0, 166.0/255.0);
	if (object_id == 0)
	{
		color = texture2D(hl_images[1], uv);
		
	}
	if (object_id >0)
	{
		color = texture2D(hl_images[0], uv);
	}
	color1=color.rgb;
	gray = dot(color1, vec3(0.299, 0.587, 0.114));
	inversegray = 1.0 - gray;
	width=hl_target_size.x;
	height=hl_target_size.y;
	if(width > 720.0 && height>720.0){
	 	dx = 3.0/(hl_target_size.x);
	 	dy = 3.0/(hl_target_size.y);
	} 
	else if(width > 480.0 && height >480.0){
	 	dx = 2.0/(hl_target_size.x);
	 	dy = 2.0/(hl_target_size.y);
	} 
	else{
		dx = 1.0/(hl_target_size.x);
	 	dy = 1.0/(hl_target_size.y);
	}
	vec2 s[9];
	s[0]=vec2(-dx,-dy);
	s[1]=vec2(-dx,0);
	s[2]=vec2(-dx,dy);
	s[3]=vec2(0,-dy);
	s[4]=vec2(0,0);
	s[5]=vec2(0,dy);
	s[6]=vec2(dx,-dy);
	s[7]=vec2(dx,0);
	s[8]=vec2(dx,dy);
	
	if (object_id == 0)
	{
		sample1 = texture2D(hl_images[1],(uv+s[0])).rgb;
	}
	if (object_id >0)
	{
		sample1 = texture2D(hl_images[0],(uv+s[0])).rgb;
	}
	gray1 = dot(sample1, vec3(0.299, 0.587, 0.114));
	inversegray1 = 1.0 - gray1;
	if (object_id == 0)
	{
		sample2 = texture2D(hl_images[1],(uv+s[1])).rgb;
	}
	if (object_id >0)
	{
		sample2 = texture2D(hl_images[0],(uv+s[1])).rgb;
	}
	gray2 = dot(sample2, vec3(0.299, 0.587, 0.114));
	inversegray2 = 1.0 - gray2;
	if (object_id == 0)
	{
		sample3 = texture2D(hl_images[1],(uv+s[2])).rgb;
	}
	if (object_id >0)
	{
		sample3 = texture2D(hl_images[0],(uv+s[2])).rgb;
	}
	gray3 = dot(sample3, vec3(0.299, 0.587, 0.114));
	inversegray3 = 1.0 - gray3;
	if (object_id == 0)
	{
		sample4 = texture2D(hl_images[1],(uv+s[3])).rgb;
	}
	if (object_id >0)
	{
		sample4 = texture2D(hl_images[0],(uv+s[3])).rgb;
	}
	gray4 = dot(sample4, vec3(0.299, 0.587, 0.114));
	inversegray4 = 1.0 - gray4;
	if (object_id == 0)
	{
		sample6 = texture2D(hl_images[1],(uv+s[5])).rgb;
	}
	if (object_id >0)
	{
		sample6 = texture2D(hl_images[0],(uv+s[5])).rgb;
	}
	gray6 = dot(sample6, vec3(0.299, 0.587, 0.114));
	inversegray6 = 1.0 - gray6;
	if (object_id == 0)
	{
		sample7 = texture2D(hl_images[1],(uv+s[6])).rgb;
	}
	if (object_id >0)
	{
		sample7 = texture2D(hl_images[0],(uv+s[6])).rgb;
	}
	gray7 = dot(sample7, vec3(0.299, 0.587, 0.114));
	inversegray7 = 1.0 - gray7;
	if (object_id == 0)
	{
		sample8 = texture2D(hl_images[1],(uv+s[7])).rgb;
	}
	if (object_id >0)
	{
		sample8 = texture2D(hl_images[0],(uv+s[7])).rgb;
	}
	gray8 = dot(sample8, vec3(0.299, 0.587, 0.114));
	inversegray8 = 1.0 - gray8;
	if (object_id == 0)
	{
		sample9 = texture2D(hl_images[1],(uv+s[8])).rgb;
	}
	if (object_id >0)
	{
		sample9 = texture2D(hl_images[0],(uv+s[8])).rgb;
	}
	gray9 = dot(sample9, vec3(0.299, 0.587, 0.114));
	inversegray9 = 1.0 - gray9;
	sum = inversegray1 + 2.0*inversegray2 + inversegray3 +
				2.0*inversegray4 + 4.0*inversegray + 2.0*inversegray6 +
				inversegray7 + 2.0*inversegray8 + inversegray9;
	guass_blur = sum /16.0;
	b = guass_blur *255.0;
	a = gray *255.0;
	temp = a*b;
	temp = temp/(256.0-b);
	temp = a+temp;
	ex = temp*temp;
	ex = ex/255.0;
	ex = ex/255.0;
	ex = ex*temp;
	ex = ex/255.0;
	temp = temp *ex;
	if(temp > 205.0){
		output_color = colorBackgnd;
	}
	else{
		temp = temp/255.0;
		output_color = vec3(temp*0.625, temp*0.625, temp*0.625);
	}	
	color.rgb=output_color;
	gl_FragColor = color;
}

>>>PixelShader